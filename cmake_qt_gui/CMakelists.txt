cmake_minimum_required (VERSION 2.8)
# Qt 安装目录
set (CMAKE_PREFIX_PATH "/Applications/Qt5.14.2/5.14.2/clang_64")
# cquery 补全 json 文件
set (CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Find includes in corresponding build directories
set (CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed
set (CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
set (CMAKE_AUTOUIC ON)

# Find the QtWidgets library
find_package(Qt5 COMPONENTS Core Gui Widgets REQUIRED)

file (GLOB Sources *.cpp)
file (GLOB Headers *.h)
file (GLOB UIs *.ui)
file (GLOB Resources *.qrc)

qt5_add_resources (ResourceSources ${Resources})

include_directories (${CMAKE_CURRENT_BINARY_DIR})

# QZipWriter/QZipReader
#include <QtGui/private/qzipwriter_p.h>
#include <QtGui/private/qzipreader_p.h>
include_directories (${CMAKE_PREFIX_PATH}/include/QtGui/5.14.2)
include_directories (${CMAKE_PREFIX_PATH}/include/QtCore/5.14.2)

# Tell CMake to create the helloworld executable
add_executable (Test ${Sources} ${Headers} ${ResourceSources})

add_custom_command (TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt5::Widgets> $<TARGET_FILE_DIR:${PROJECT_NAME}>
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt5::Core> $<TARGET_FILE_DIR:${PROJECT_NAME}>
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt5::Gui> $<TARGET_FILE_DIR:${PROJECT_NAME}>
    )

# Use the Widgets module from Qt 5
target_link_libraries (Test Qt5::Core Qt5::Gui Qt5::Widgets)

#qt5_use_module (Test Widgets Qml Quick)
include (CheckCXXCompilerFlag)
check_cxx_compiler_flag ("-std=c++11" compiler_supports_cxx11)
check_cxx_compiler_flag ("-std=c++0x" compiler_supports_cxx0x)
if (compiler_supports_cxx11)
  set (cmake_cxx_flags "${cmake_cxx_flags} -std=c++11")
elseif (compiler_supports_cxx0x)
  set (cmake_cxx_flags "${cmake_cxx_flags} -std=c++0x")
else ()
  message (status "the compiler ${cmake_cxx_compiler} has no c++11 support. please use a different c++ compiler.")
endif()
